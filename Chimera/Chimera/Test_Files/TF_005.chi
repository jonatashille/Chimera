struct cliente
    var int id;
    var string nome;
    var bool objr;
    var int not_array, array[5];
end_struct

class cliente_class
    private:
        var int id;
        var string nome;
        var bool platinium;
        function int calcular_id()
            var string count;
            if (1) then
              return count;
            end_if
            repeat 
              objr = true;
            until (id==id);
            while (id==id) do
              objr = true;
            loop
            return nome;
        end_function
        const c_privada = 51;
    public:
        sub set_cliente(var string _nome by value, var bool _platinium by value)
            var int id;
            var int a, a1, a2, b1,b2, b, d1, c1, c3, c2, c4, c5, d, c;
            var string propriedade;
            id = calcular_id();
            nome = _nome;
            platinium = _platinium;
            cliente.cliente.nome = "Sage";
            cliente.nome = "Sage";
            cliente->cliente->nome = "Sage";
            cliente->cliente.nome = "Sage";
            cliente.cliente->nome = "Sage";
            b = calcular_id();
            a.a1.a2 = b1.b2->calcular_id();
            a.a1.a2 = b1.b2->calcular_id();
            d1 = c1->c2.c3.c4->c5.calcular_id();
            d1 = c1->c2.c3.c4->c5.id;
            d1 = c1->c2.c3.c4->c5.array[1];
            print(c1->c2.c3.c4->c5.calcular_id());
            print(c1->c2.c3.c4->c5->array[1]);
            a->a->a->b.b.b = 1;
        a = b1->c5;
        a.a1.a2 = b1->b2->calcular_id();
        a = b1 + b1->b2->calcular_id();
        c1->c2.c3.c4->c5->array[1] = b1->b2->calcular_id() + b1 - 5 * b1->b2->calcular_id() / b1->b2->c1 + array[1];
        a = b1->d;
        scan(cliente.array[c]);
        end_sub 
        const c_publica= "const publica";
        function string get_nome(var int array_int[5] by value, var string s1 by ref, var bool b1 by value, var int i1 by value)
              for c1->c2.c3.c4->c5.a = 1 to (c <= array_int[5]) do //array_int[5]
                print(a);
                c = c+1;
                array_int[5] = 5;
              next
            return nome;
        end_function    
    private:
        function int calcular_id2()
            return id;
        end_function           
end_class

const MAX = 7;
const MAX_ARRAY = 100;

function int fibonacci(var int n by value)
  var bool teste;
  if(n==0) then
    return 0;
  else
  if(n==1) then
    return 1;
  else
    return (fibonacci(n-1) + fibonacci(n-2));
  end_if
  end_if
end_function

sub p_fibonacci()
  //Programa serie de Fibonacci 
  var int n, i, c;
  i = 0;
  scan(n);

  print("Serie de Fibonacci:\n");

  for c = 1 to (c <= n) do
    print(fibonacci(i));
    i = i+1; 
    c = c+1;
  next
  //Fim programa serie de Fibonacci
end_sub 

sub p_par_impar()
  var int n;
 
   print("Digite um numero inteiro\n");
   scan(n);
 
   if (n mod 2 == 0) then
      print("Par\n");
   else
      print("Impar\n");
    end_if
end_sub

function int fatorial(var int n by value)
  if (n == 0) then
    return 1;
  else
    return(n * fatorial(n-1));
  end_if
end_function

sub p_fatorial()
  var int n;
  var int f;
 
  print("Digite um inteiro para encontrar o fatorial\n");
  scan(n); 
 
  if (n < 0 or n>MAX) then
    print("Numero nao permitido.Negativo ou maior que 7.\n");
  else
    f = fatorial(n);
    print(n,"=",f);
  end_if
end_sub

sub p_operacoes()
   var int num1, num2, soma, diminui, multiplica;
   var float divide;
 
   print("Digite 2 inteiros.\n");
   scan(num1, num2);
 
   soma = num1 + num2;
   diminui = num1 - num2;
   multiplica = num1 * num2;
   divide = num1 / num2;   //casting
 
   print("Soma = ",soma,"\n");
   print("Diferenca = ",diminui,"\n");
   print("Multiplicacao = ",multiplica,"\n");
   print("Divisao = ",divide,"\n");
end_sub

sub p_maior_num_array()
  var int array[MAX_ARRAY], maximo, tamanho, c, local;
  local = 1;
  print("Digite o numero de elementos no array\n");
  scan(tamanho);

  print("Digite ",tamanho, "inteiros\n");
 
  for c = 0 to (c < tamanho) do
    scan(array[c]);
    c = c+1;
  next
  maximo = array[0];
 
  for c = 1 to (c < tamanho) do 
    if (array[c] > maximo) then
       maximo  = array[c];
       local = c+1;
    end_if
    c = c+1;
  next
 
  print("O maior elemento esta no local", local, " e o valor dele e: ", maximo , "\n");
end_sub

sub bubble_sort(var int lista by ref, var int n by value)
  var int c, d, t;

  for c = 0 to (c < ( n - 1 )) do
    for d = 0 to (d < n - c - 1) do
      if (lista > lista) then
        /// Swapping 
        t         = lista;
        lista  = lista;
        lista = t;
      end_if
      d = d+1;
    next
    c = c+1;
  next
end_sub

sub p_bubble_sort()
  var int array[MAX_ARRAY], tamanho, c, d, swap;

  print("Digite o numero de elementos\n");
  scan(tamanho);

  print("Digite ",tamanho, "inteiros\n");

  for c = 0 to (c < tamanho) do
    scan(array[c]);
    c = c+1;
  next

  bubble_sort(array, tamanho);

  print("Lista ordenada esta em ordem crescente:\n");

  for c = 0 to (c < tamanho) do
    print(array[c], "\n");
    c = c+1;
  next  
end_sub

sub main()
  p_fibonacci();
  p_par_impar();
  p_fatorial();
  p_operacoes();
  p_maior_num_array();
  p_bubble_sort();
end_sub 

